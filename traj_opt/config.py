from traj_opt.models import HoppingSoftfly, FlatTerrain, Softfly


robot_name_to_model_map = {
    "hopping_softfly": HoppingSoftfly,
    "softfly": Softfly
}
"""
Maps a robot model name to the corresponding model class.
"""

terrain_name_to_model_map = {
    "flat_preset": FlatTerrain,
}
"""
Maps a terrain model name to the corresponding model class.
"""


class TrajOptConfig:

    save_solution_as: str = "solution.npz"
    """
    The name of the file to save the solution to.
    """

    initial_guess_path: str = "solution.npz"
    """
    The name of the .npz file to load the initial guess from.

    If no file is found, no initial guess is used.
    """

    robot_name: str = "hopping_softfly"
    """
    The name of the robot model being used for optimization.
    """

    initial_state: dict[str, float | list[float]] = {
        "position": [0.0, 0.0, 1.0],
        "velocity": [0.0, 0.0, 0.0],
        "q_body_to_world": [0.0, 0.0, 0.0, 1.0], # World2Body (x, y, z, w)
        "angular_velocity_body": [0.0, 0.0, 0.0],
        "control_force": 9.81, # Along the body z-axis
        "control_moment": [0.0, 0.0, 0.0] # In body frame
    }
    """
    The initial position of the robot.
    """

    final_state: dict[str, float | list[float]] = {
        "position": [0.0, 0.0, 1.2],
        "velocity": [0.0, 0.0, 0.0],
        "q_body_to_world": [0.0, 0.0, 0.0, 1.0], # World2Body (x, y, z, w)
        "angular_velocity_body": [0.0, 0.0, 0.0],
        "control_force": 9.81, # Along the body z-axis
        "control_moment": [0.0, 0.0, 0.0] # In body frame
    }
    """
    The final position of the robot.
    """

    cost_weights: dict[str, float] = {
        'position_world': 0.0,
        'velocity_world': 0.0,
        'q_body_to_world': 0.0,
        'angular_velocity_body': 0.00,
        'control_force': 0.0,
        'control_moment': 0.0,
        'contact_force': 10000,
        'T': 1.0
    }
    """
    Cost function weights for the optimization problem.
    Keys correspond with casadi variable names defined in the model.
    """

    num_steps: int = 100
    """
    The number of steps that the trajectory is discretely broken into.

    This is the number of collocation points in the optimization problem.

    h = T / num_steps
    """

    terrain_source: str = "flat_preset"
    """
    The source of the terrain data.

    Currently supports presets, meaning the terrain data will be generated by the terrain class:
        - Available options: ["flat_preset"]
    """

    max_time: float = 2.0
    """
    The maximum time allowed to reach the final position from the initial position.
    """

    ipopt_print_level: int = 5
    """
    The verbosity level of IPOPT solver output.

    Ranges from 0 to 12, with 0 being the least verbose and 12 being the most verbose.
    """