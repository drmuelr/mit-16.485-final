from pydantic import BaseModel, FiniteFloat

from traj_opt.models import HoppingSoftfly, FlatTerrain, Softfly


robot_name_to_model_map = {
    "hopping_softfly": HoppingSoftfly,
    "softfly": Softfly
}
"""
Maps a robot model name to the corresponding model class.
"""

terrain_name_to_model_map = {
    "flat_preset": FlatTerrain,
}
"""
Maps a terrain model name to the corresponding model class.
"""

class TrajOptConfig(BaseModel):
    
    robot_name: str = "softfly"
    """
    The name of the robot model being used for optimization.
    """

    initial_position: list[FiniteFloat] = [0.0, 0.0, 2.0]
    """
    The initial position of the robot.
    """

    final_position: list[FiniteFloat] = [1.0, 0.0, 0.0]
    """
    The final position of the robot.
    """

    num_steps: int = 100
    """
    The number of steps that the trajectory is discretely broken into.

    This is the number of collocation points in the optimization problem.

    h = T / num_steps
    """

    terrain_source: str = "flat_preset"
    """
    The source of the terrain data. 

    Can provide a preset, meaning the terrain data will be generated by the terrain class: 
        - Available options: ["flat_preset"]

    OR

    Can be a file path to a terrain SDF lookup table in CSV format, e.g. "terrain_example.csv".
    """

    max_time: FiniteFloat = 10.0
    """
    The maximum time allowed to reach the final position from the initial position.
    """


